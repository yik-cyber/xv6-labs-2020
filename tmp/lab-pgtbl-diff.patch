diff --git a/kernel/defs.h b/kernel/defs.h
index a73b4f7..bb00770 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -159,6 +159,7 @@ int             uartgetc(void);
 
 // vm.c
 void            kvminit(void);
+pagetable_t     uvmcreatekp(void);
 void            kvminithart(void);
 uint64          kvmpa(uint64);
 void            kvmmap(uint64, uint64, uint64, int);
@@ -167,6 +168,7 @@ pagetable_t     uvmcreate(void);
 void            uvminit(pagetable_t, uchar *, uint);
 uint64          uvmalloc(pagetable_t, uint64, uint64);
 uint64          uvmdealloc(pagetable_t, uint64, uint64);
+void            uvmcopy_kernel(pagetable_t, pagetable_t, uint64, uint64);
 #ifdef SOL_COW
 #else
 int             uvmcopy(pagetable_t, pagetable_t, uint64);
@@ -175,9 +177,18 @@ void            uvmfree(pagetable_t, uint64);
 void            uvmunmap(pagetable_t, uint64, uint64, int);
 void            uvmclear(pagetable_t, uint64);
 uint64          walkaddr(pagetable_t, uint64);
+pte_t*           walk(pagetable_t, uint64, int);
+void            freewalk(pagetable_t);
+void            freewalkkp(pagetable_t);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+void            vmprint(pagetable_t);
+
+// vmcopyin.c
+int             copyin_new(pagetable_t, char *, uint64, uint64);
+int             copyinstr_new(pagetable_t, char *, uint64, uint64);
+
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/exec.c b/kernel/exec.c
index 0e8762f..b214017 100644
--- a/kernel/exec.c
+++ b/kernel/exec.c
@@ -75,6 +75,8 @@ exec(char *path, char **argv)
   sp = sz;
   stackbase = sp - PGSIZE;
 
+  uvmcopy_kernel(pagetable, p->kernel_pagetable, 0, sz);
+
   // Push argument strings, prepare rest of stack in ustack.
   for(argc = 0; argv[argc]; argc++) {
     if(argc >= MAXARG)
@@ -116,6 +118,10 @@ exec(char *path, char **argv)
   p->trapframe->sp = sp; // initial stack pointer
   proc_freepagetable(oldpagetable, oldsz);
 
+  
+  if(p->pid == 1)
+    vmprint(p->pagetable);
+
   return argc; // this ends up in a0, the first argument to main(argc, argv)
 
  bad:
diff --git a/kernel/proc.c b/kernel/proc.c
index dab1e1d..3da79f8 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -20,6 +20,7 @@ static void wakeup1(struct proc *chan);
 static void freeproc(struct proc *p);
 
 extern char trampoline[]; // trampoline.S
+extern pagetable_t kernel_pagetable; // vm.c
 
 // initialize the proc table at boot time.
 void
@@ -34,12 +35,12 @@ procinit(void)
       // Allocate a page for the process's kernel stack.
       // Map it high in memory, followed by an invalid
       // guard page.
-      char *pa = kalloc();
-      if(pa == 0)
-        panic("kalloc");
-      uint64 va = KSTACK((int) (p - proc));
-      kvmmap(va, (uint64)pa, PGSIZE, PTE_R | PTE_W);
-      p->kstack = va;
+      // char *pa = kalloc();
+      // if(pa == 0)
+      //   panic("kalloc");
+      // uint64 va = KSTACK((int) (p - proc));
+      // kvmmap(va, (uint64)pa, PGSIZE, PTE_R | PTE_W);
+      // p->kstack = va;
   }
   kvminithart();
 }
@@ -121,6 +122,29 @@ found:
     return 0;
   }
 
+  // create user kernel page table
+  // printf("allocproc: uvmcreatekp\n");
+  p->kernel_pagetable = uvmcreatekp();
+  if(p->kernel_pagetable == 0){
+    freeproc(p);
+    release(&p->lock);
+    return 0;
+  }
+
+  // allocate and map the kernel stack for the new process
+  // printf("allocproc: allocate kernel stack\n");
+  char *pa = kalloc();
+  if(pa == 0){
+    panic("allocproc: kalloc");
+  }
+  uint64 va = KSTACK((int) (p - proc));
+  if(mappages(p->kernel_pagetable, va, PGSIZE, (uint64)pa, PTE_R | PTE_W) != 0){
+    freeproc(p);
+    release(&p->lock);
+    return 0;
+  }
+  p->kstack = va;
+
   // Set up new context to start executing at forkret,
   // which returns to user space.
   memset(&p->context, 0, sizeof(p->context));
@@ -139,9 +163,25 @@ freeproc(struct proc *p)
   if(p->trapframe)
     kfree((void*)p->trapframe);
   p->trapframe = 0;
+
+  
+  // free kernel stack
+  pte_t* pte;
+  if((pte = walk(p->kernel_pagetable, p->kstack, 0)) == 0){
+    panic("freeproc: kstack");
+  }
+  kfree((char*)PTE2PA(*pte));
+  p->kstack = 0;
+  
   if(p->pagetable)
-    proc_freepagetable(p->pagetable, p->sz);
+    proc_freepagetable(p->pagetable, p->sz); 
   p->pagetable = 0;
+  
+  // unmap kernel page table
+  if(p->kernel_pagetable)
+    freewalkkp(p->kernel_pagetable);
+  p->kernel_pagetable = 0;
+  
   p->sz = 0;
   p->pid = 0;
   p->parent = 0;
@@ -221,6 +261,8 @@ userinit(void)
   uvminit(p->pagetable, initcode, sizeof(initcode));
   p->sz = PGSIZE;
 
+  uvmcopy_kernel(p->pagetable, p->kernel_pagetable, 0, p->sz);
+
   // prepare for the very first "return" from kernel to user.
   p->trapframe->epc = 0;      // user program counter
   p->trapframe->sp = PGSIZE;  // user stack pointer
@@ -243,12 +285,16 @@ growproc(int n)
 
   sz = p->sz;
   if(n > 0){
+    if(PGROUNDUP(sz + n) >= PLIC){
+      return -1;
+    }
     if((sz = uvmalloc(p->pagetable, sz, sz + n)) == 0) {
       return -1;
     }
-  } else if(n < 0){
+  } else if(n < 0){   
     sz = uvmdealloc(p->pagetable, sz, sz + n);
   }
+  uvmcopy_kernel(p->pagetable, p->kernel_pagetable, p->sz, sz);
   p->sz = sz;
   return 0;
 }
@@ -275,6 +321,8 @@ fork(void)
   }
   np->sz = p->sz;
 
+  uvmcopy_kernel(np->pagetable, np->kernel_pagetable, 0, np->sz); 
+
   np->parent = p;
 
   // copy saved user registers.
@@ -473,11 +521,15 @@ scheduler(void)
         // before jumping back to us.
         p->state = RUNNING;
         c->proc = p;
+        // scheduler is in the kernel
+        w_satp(MAKE_SATP(p->kernel_pagetable));
+        sfence_vma();
         swtch(&c->context, &p->context);
 
         // Process is done running for now.
         // It should have changed its p->state before coming back.
         c->proc = 0;
+        kvminithart();
 
         found = 1;
       }
diff --git a/kernel/proc.h b/kernel/proc.h
index 9c16ea7..925fa68 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -98,6 +98,7 @@ struct proc {
   uint64 kstack;               // Virtual address of kernel stack
   uint64 sz;                   // Size of process memory (bytes)
   pagetable_t pagetable;       // User page table
+  pagetable_t kernel_pagetable; // User kernel page table
   struct trapframe *trapframe; // data page for trampoline.S
   struct context context;      // swtch() here to run process
   struct file *ofile[NOFILE];  // Open files
diff --git a/kernel/vm.c b/kernel/vm.c
index bccb405..6e1943d 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -5,6 +5,8 @@
 #include "riscv.h"
 #include "defs.h"
 #include "fs.h"
+#include "spinlock.h"
+#include "proc.h"
 
 /*
  * the kernel's page table.
@@ -47,6 +49,33 @@ kvminit()
   kvmmap(TRAMPOLINE, (uint64)trampoline, PGSIZE, PTE_R | PTE_X);
 }
 
+void kvmmap_proc(pagetable_t pagetable, uint64 va, uint64 pa, uint64 sz, int perm){
+  if(mappages(pagetable, va, sz, pa, perm) != 0){
+    panic("kvmmap_proc");
+  }
+  return;
+}
+
+// create a new kernel page table for every new process when create a new process
+pagetable_t
+uvmcreatekp()
+{
+  pagetable_t new_kernel_pagetable = (pagetable_t) kalloc();
+  memset(new_kernel_pagetable, 0, PGSIZE);
+  
+  kvmmap_proc(new_kernel_pagetable, UART0, UART0, PGSIZE, PTE_R | PTE_W);
+  kvmmap_proc(new_kernel_pagetable, VIRTIO0, VIRTIO0, PGSIZE, PTE_R | PTE_W);
+  // kvmmap_proc(new_kernel_pagetable, CLINT, CLINT, 0x10000, PTE_R | PTE_W);
+  kvmmap_proc(new_kernel_pagetable, PLIC, PLIC, 0x400000, PTE_R | PTE_W);
+  kvmmap_proc(new_kernel_pagetable, KERNBASE, KERNBASE, (uint64)etext-KERNBASE, PTE_R | PTE_X);
+  kvmmap_proc(new_kernel_pagetable, (uint64)etext, (uint64)etext, PHYSTOP-(uint64)etext, PTE_R | PTE_W);
+  kvmmap_proc(new_kernel_pagetable, TRAMPOLINE, (uint64)trampoline, PGSIZE, PTE_R | PTE_X);
+
+  return new_kernel_pagetable;
+}
+
+
+
 // Switch h/w page table register to the kernel's page table,
 // and enable paging.
 void
@@ -132,7 +161,8 @@ kvmpa(uint64 va)
   pte_t *pte;
   uint64 pa;
   
-  pte = walk(kernel_pagetable, va, 0);
+  // should use the kernel pagetable of the process
+  pte = walk(myproc()->kernel_pagetable, va, 0);
   if(pte == 0)
     panic("kvmpa");
   if((*pte & PTE_V) == 0)
@@ -289,6 +319,29 @@ freewalk(pagetable_t pagetable)
   kfree((void*)pagetable);
 }
 
+// free walk the kernel page table
+void
+freewalkkp(pagetable_t pagetable)
+{
+  // there are 2^9 = 512 PTEs in a page table.
+  pte_t* pte;
+  pagetable_t child;
+  for(int i = 0; i < 512; i++){
+    pte = &pagetable[i];
+    if(!(*pte & PTE_V))
+      continue;
+    // not the leaf
+    if ((*pte & (PTE_R | PTE_W | PTE_X)) == 0){
+      child = (pagetable_t)PTE2PA(*pte);
+      freewalkkp(child);
+    }
+    else{
+      *pte = 0; // the leaf
+    }
+  }
+  kfree((void*)pagetable);
+}
+
 // Free user memory pages,
 // then free page-table pages.
 void
@@ -335,6 +388,30 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   return -1;
 }
 
+
+void uvmcopy_kernel(pagetable_t pagetable, pagetable_t kpagetable, uint64 start, uint64 end){
+  pte_t* pte;
+  pte_t* kpte;
+  uint64 pa, va;
+  int flag;
+  
+  if(start >= end)
+    return;
+  
+  start = PGROUNDUP(start);
+  for(va = start; va < end; va += PGSIZE){
+    if((pte = walk(pagetable, va, 0)) == 0)
+      panic("uvmcopy_kernel: pte walk");
+    if((kpte = walk(kpagetable, va, 1)) == 0) // debug
+      panic("uvmcopy_kernel: kpte walk");
+    
+    pa = PTE2PA(*pte);
+    flag = PTE_FLAGS(*pte) & (~PTE_U);
+    *kpte = PA2PTE(pa) | flag;
+  }
+  return;
+}
+
 // mark a PTE invalid for user access.
 // used by exec for the user stack guard page.
 void
@@ -376,67 +453,101 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
 // Copy from user to kernel.
 // Copy len bytes to dst from virtual address srcva in a given page table.
 // Return 0 on success, -1 on error.
+// int
+// copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len)
+// {
+//   uint64 n, va0, pa0;
+
+//   while(len > 0){
+//     va0 = PGROUNDDOWN(srcva);
+//     pa0 = walkaddr(pagetable, va0);
+//     if(pa0 == 0)
+//       return -1;
+//     n = PGSIZE - (srcva - va0);
+//     if(n > len)
+//       n = len;
+//     memmove(dst, (void *)(pa0 + (srcva - va0)), n);
+
+//     len -= n;
+//     dst += n;
+//     srcva = va0 + PGSIZE;
+//   }
+//   return 0;
+// }
+
+
 int
 copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len)
 {
-  uint64 n, va0, pa0;
-
-  while(len > 0){
-    va0 = PGROUNDDOWN(srcva);
-    pa0 = walkaddr(pagetable, va0);
-    if(pa0 == 0)
-      return -1;
-    n = PGSIZE - (srcva - va0);
-    if(n > len)
-      n = len;
-    memmove(dst, (void *)(pa0 + (srcva - va0)), n);
-
-    len -= n;
-    dst += n;
-    srcva = va0 + PGSIZE;
-  }
-  return 0;
+  return copyin_new(pagetable, dst, srcva, len);
 }
 
 // Copy a null-terminated string from user to kernel.
 // Copy bytes to dst from virtual address srcva in a given page table,
 // until a '\0', or max.
 // Return 0 on success, -1 on error.
-int
-copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
-{
-  uint64 n, va0, pa0;
-  int got_null = 0;
+// int
+// copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
+// {
+//   uint64 n, va0, pa0;
+//   int got_null = 0;
+
+//   while(got_null == 0 && max > 0){
+//     va0 = PGROUNDDOWN(srcva);
+//     pa0 = walkaddr(pagetable, va0);
+//     if(pa0 == 0)
+//       return -1;
+//     n = PGSIZE - (srcva - va0);
+//     if(n > max)
+//       n = max;
+
+//     char *p = (char *) (pa0 + (srcva - va0));
+//     while(n > 0){
+//       if(*p == '\0'){
+//         *dst = '\0';
+//         got_null = 1;
+//         break;
+//       } else {
+//         *dst = *p;
+//       }
+//       --n;
+//       --max;
+//       p++;
+//       dst++;
+//     }
+
+//     srcva = va0 + PGSIZE;
+//   }
+//   if(got_null){
+//     return 0;
+//   } else {
+//     return -1;
+//   }
+// }
+
+int copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max){
+  return copyinstr_new(pagetable, dst, srcva, max);
+}
 
-  while(got_null == 0 && max > 0){
-    va0 = PGROUNDDOWN(srcva);
-    pa0 = walkaddr(pagetable, va0);
-    if(pa0 == 0)
-      return -1;
-    n = PGSIZE - (srcva - va0);
-    if(n > max)
-      n = max;
-
-    char *p = (char *) (pa0 + (srcva - va0));
-    while(n > 0){
-      if(*p == '\0'){
-        *dst = '\0';
-        got_null = 1;
-        break;
-      } else {
-        *dst = *p;
+void vmprint_recursion(pagetable_t pagetable, int level){
+  pte_t pte;
+  for(int i = 0; i < 512; ++i){
+    pte = pagetable[i];
+    if(pte & PTE_V){
+      printf("..");
+      for(int j = 0; j < level; ++j){
+        printf(" ..");
       }
-      --n;
-      --max;
-      p++;
-      dst++;
+      printf("%d: pte %p pa %p\n", i, pte, PTE2PA(pte));
+      
+      if(level < 2){
+        vmprint_recursion((pagetable_t)PTE2PA(pte), level + 1);
+      }      
     }
-
-    srcva = va0 + PGSIZE;
-  }
-  if(got_null){
-    return 0;
-  } else {
-    return -1;
   }
 }
+
+void vmprint(pagetable_t pagetable){
+  printf("page table %p\n", pagetable);
+  vmprint_recursion(pagetable, 0);
+}
\ No newline at end of file
